{{ if .Values.letsEncrypt.enabled }}
{{ if .Values.letsEncrypt.staging.enabled }}
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: kcp-letsencrypt-staging
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: "pki"
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: {{ .Values.letsEncrypt.staging.email }}}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: le-issuer-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          class: nginx
{{ end }}
{{ if .Values.letsEncrypt.production.enabled }}
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: kcp-letsencrypt-prod
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: "pki"
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: {{ .Values.letsEncrypt.production.email }}
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: le-issuer-account-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          class: nginx
{{ end }}
{{ end }}
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: kcp-selfsigned-issuer
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: "pki"
spec:
  selfSigned: {}

